# SPDX-FileCopyrightText: 2017 Jeremiah Orians
# SPDX-FileCopyrightText: 2022 Andrius Å tikonas
#
# SPDX-License-Identifier: GPL-3.0-or-later

DEFINE add_eax,edi 01F8
DEFINE call E8
DEFINE cmp_al, 3C
DEFINE dec_ebp 4D
DEFINE int CD
DEFINE je 74
DEFINE jge 7D
DEFINE jl 7C
DEFINE jmp EB
DEFINE jne 75
DEFINE mov_ebx,edx 89D3
DEFINE mov_ebx,esi 89F3
DEFINE mov_ecx,esp 89E1
DEFINE mov_edi,eax 89C7
DEFINE mov_edx,eax 89C2
DEFINE mov_esi,eax 89C6
DEFINE mov_cx, 66B9
DEFINE mov_dx, 66BA
DEFINE pop_eax 58
DEFINE pop_ebx 5B
DEFINE pop_ebp 5D
DEFINE pop_edx 5A
DEFINE push_eax 50
DEFINE push_edi 57
DEFINE push_edx 52
DEFINE push 6A
DEFINE ret C3
DEFINE shl_edi, C1E7
DEFINE sub_al, 2C
DEFINE test_eax,eax 85C0
DEFINE test_ebp,ebp 85ED
DEFINE xor_ebp,ebp 31ED
DEFINE xor_ebx,ebx 31DB
DEFINE xor_ecx,ecx 31C9
DEFINE xor_edi,edi 31FF
DEFINE xor_edx,edx 31D2

# Where the ELF Header is going to hit
# Simply jump to _start
# Our main function
:_start
	pop_eax                     # Get the number of arguments
	pop_ebx                     # Get the program name
	pop_ebx                     # Get the actual input name
	xor_ecx,ecx                 # prepare read_only, ecx = 0
	xor_edx,edx                 # Extra sure, edx = 0
	push !5                     # prepare to set eax to 5
	pop_eax                     # the syscall number for open()
	int !0x80                   # Now open that damn file
	mov_esi,eax                 # Preserve the file pointer we were given

	pop_ebx                     # Get the actual output name
	mov_cx, @577                # Prepare file as O_WRONLY|O_CREAT|O_TRUNC
	mov_dx, @448                # Prepare file as RWX for owner only (700 in octal)
	push !5                     # prepare to set eax to 5
	pop_eax                     # the syscall number for open()
	int !0x80                   # Now open that damn file
	mov_edx,eax                 # Preserve the file pointer we were given

	# Our flag for byte processing
	push !-1
	pop_ebp                     # ebp = -1

	# temp storage for the sum
	xor_edi,edi                 # edi = 0

:loop
	# Read a byte
	call %Read_byte

	# process byte
	call %hex

	# Deal with -1 values
	test_eax,eax
	jl !loop

	# deal with toggle
	test_ebp,ebp                # jump if ebp >= 0
	jge !print

	# process first byte of pair
	mov_edi,eax
	xor_ebp,ebp                 # ebp = 0
	jmp !loop

# process second byte of pair
:print
	# update the sum and store in output
	shl_edi, !4
	add_eax,edi

	# flip the toggle
	dec_ebp                     # ebp = -1

	call %write_byte

	jmp !loop

:hex
	# Purge Comment Lines (#)
	cmp_al, !35
	je !purge_comment

	# Purge Comment Lines (;)
	cmp_al, !59
	je !purge_comment

	# deal all ascii less than 0
	cmp_al, !48
	jl !ascii_other

	# deal with 0-9
	cmp_al, !58
	jl !ascii_num

	# deal with all ascii less than A
	cmp_al, !65
	jl !ascii_other

	# deal with A-F
	cmp_al, !71
	jl !ascii_high

	# deal with all ascii less than a
	cmp_al, !97
	jl !ascii_other

	# deal with a-f
	cmp_al, !103
	jl !ascii_low

	# The rest that remains needs to be ignored
	jmp !ascii_other

:purge_comment
	# Read a byte
	call %Read_byte

	# Loop if not LF
	cmp_al, !10
	jne !purge_comment

	# Otherwise return -1

:ascii_other
	push !-1
	pop_eax                     # return -1
	ret

:ascii_num
	sub_al, !48
	ret

:ascii_low
	sub_al, !32                 # convert to uppercase

:ascii_high
	sub_al, !55
	ret

# Writes byte stored in al
:write_byte
	# Print our Hex
	mov_ebx,edx                 # Where are we writing to
	push_edx                    # protect fout
	push !1                     # prepare to set edx to 1
	pop_edx                     # set the size of chars we want
	push_eax                    # Move output to stack
	mov_ecx,esp                 # What we are writing
	push !4                     # prepare to set eax to 4
	pop_eax                     # the syscall number for write
	int !0x80                   # call the Kernel
	pop_ebx                     # deallocate stack
	pop_edx                     # restore fout
	ret

:Read_byte
	# Attempt to read 1 byte from Input file
	push_edx                    # protect fout
	push !1                     # prepare to set edx to 1
	pop_edx                     # set the size of chars we want
	push_ebp                    # allocate stack
	mov_ecx,esp                 # Where to put it
	mov_ebx,esi                 # Where are we reading from
	push !3                     # prepare to set eax to 3
	pop_eax                     # the syscall number for read
	int !0x80                   # call the Kernel

	test_eax,eax                # check what we got
	je !Done                    # Got EOF call it done

	# load byte
	pop_eax                     # load char
	pop_edx                     # restore fout
	ret

:Done
	# program completed Successfully
	xor_ebx,ebx                 # All is well, ebx = 0
	push !1
	pop_eax                     # put the exit syscall number in eax
	int !0x80                   # Call it a good day

:ELF_end
